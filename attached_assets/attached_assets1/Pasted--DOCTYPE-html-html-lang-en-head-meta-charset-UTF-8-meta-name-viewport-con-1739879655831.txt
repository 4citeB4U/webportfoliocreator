<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Orb Animation</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: black;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        #orbContainer {
            position: relative;
            width: 500px;
            height: 500px;
        }

        canvas {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>
    <div id="orbContainer">
        <canvas id="outerRing"></canvas>
        <canvas id="innerParticles"></canvas>
    </div>

    <script>
        const outerRing = document.getElementById('outerRing');
        const innerParticles = document.getElementById('innerParticles');
        const outerCtx = outerRing.getContext('2d');
        const innerCtx = innerParticles.getContext('2d');

        // Enhanced color palette
        const colors = [
            { r: 41, g: 98, b: 255 },    // Electric Blue
            { r: 0, g: 221, b: 255 },    // Cyan
            { r: 124, g: 0, b: 255 },    // Purple
            { r: 0, g: 157, b: 255 }     // Sky Blue
        ];

        let colorIndex = 0;
        let nextColorIndex = 1;
        let colorTransition = 0;
        const colorTransitionSpeed = 0.001;
        let pulseTime = 0;
        const pulseDuration = 6;
        const maxExpansion = 1.15;

        class OrbitalParticle {
            constructor(canvas) {
                this.canvas = canvas;
                this.init();
            }

            init() {
                const centerX = this.canvas.width / 2;
                const centerY = this.canvas.height / 2;
                this.orbitRadius = Math.random() * (this.canvas.width * 0.15);
                this.angle = Math.random() * Math.PI * 2;
                this.angularSpeed = (0.2 + Math.random() * 0.5) * (Math.random() < 0.5 ? 1 : -1);
                this.x = centerX + Math.cos(this.angle) * this.orbitRadius;
                this.y = centerY + Math.sin(this.angle) * this.orbitRadius;
                this.size = Math.random() * 2 + 1;
                this.pulseSpeed = Math.random() * 0.05 + 0.02;
                this.pulseOffset = Math.random() * Math.PI * 2;
                this.opacity = Math.random() * 0.5 + 0.3;
            }

            update() {
                const centerX = this.canvas.width / 2;
                const centerY = this.canvas.height / 2;
                
                // Update angle for orbital motion
                this.angle += this.angularSpeed * 0.02;
                
                // Calculate base position from orbital motion
                const baseX = centerX + Math.cos(this.angle) * this.orbitRadius;
                const baseY = centerY + Math.sin(this.angle) * this.orbitRadius;
                
                // Add slight random movement
                const time = Date.now() / 1000;
                const wobbleX = Math.sin(time * this.pulseSpeed + this.pulseOffset) * 2;
                const wobbleY = Math.cos(time * this.pulseSpeed + this.pulseOffset) * 2;
                
                this.x = baseX + wobbleX;
                this.y = baseY + wobbleY;
                
                // Pulse size
                this.currentSize = this.size * (1 + Math.sin(time * this.pulseSpeed) * 0.2);
            }

            draw(ctx, color) {
                const time = Date.now() / 1000;
                const currentOpacity = this.opacity * (0.7 + Math.sin(time * this.pulseSpeed + this.pulseOffset) * 0.3);
                
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.currentSize, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(${color.r}, ${color.g}, ${color.b}, ${currentOpacity})`;
                ctx.fill();
            }
        }

        function resizeCanvas() {
            const container = document.getElementById('orbContainer');
            const size = Math.min(container.offsetWidth, container.offsetHeight);
            
            outerRing.width = size;
            outerRing.height = size;
            innerParticles.width = size;
            innerParticles.height = size;
        }

        // Initialize particles
        const particles = [];
        function initParticles() {
            particles.length = 0;
            for (let i = 0; i < 300; i++) {
                particles.push(new OrbitalParticle(innerParticles));
            }
        }

        function drawOuterRing(color) {
            const centerX = outerRing.width / 2;
            const centerY = outerRing.height / 2;
            const baseRadius = outerRing.width * 0.25;

            const progress = (Math.sin(pulseTime * Math.PI * 2 / pulseDuration) + 1) / 2;
            const scaleFactor = 1 + (maxExpansion - 1) * progress;
            const opacity = 0.8 - (progress * 0.3);

            outerCtx.clearRect(0, 0, outerRing.width, outerRing.height);

            // Draw outer glow
            const radius = baseRadius * scaleFactor;
            const gradient = outerCtx.createRadialGradient(
                centerX, centerY, radius * 0.6,
                centerX, centerY, radius * 1.4
            );
            
            gradient.addColorStop(0, `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity})`);
            gradient.addColorStop(0.5, `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity * 0.375})`);
            gradient.addColorStop(1, `rgba(${color.r}, ${color.g}, ${color.b}, 0)`);

            outerCtx.fillStyle = gradient;
            outerCtx.beginPath();
            outerCtx.arc(centerX, centerY, radius * 1.4, 0, Math.PI * 2);
            outerCtx.fill();

            // Draw black core with soft edge
            const coreGradient = outerCtx.createRadialGradient(
                centerX, centerY, baseRadius * 0.5,
                centerX, centerY, baseRadius * 0.6
            );
            coreGradient.addColorStop(0, 'rgba(0, 0, 0, 1)');
            coreGradient.addColorStop(1, 'rgba(0, 0, 0, 0.95)');

            outerCtx.fillStyle = coreGradient;
            outerCtx.beginPath();
            outerCtx.arc(centerX, centerY, baseRadius * 0.6, 0, Math.PI * 2);
            outerCtx.fill();
        }

        function animate(timestamp) {
            colorTransition += colorTransitionSpeed;
            if (colorTransition >= 1) {
                colorTransition = 0;
                colorIndex = nextColorIndex;
                nextColorIndex = (nextColorIndex + 1) % colors.length;
            }

            pulseTime = (timestamp / 1000) % pulseDuration;
            
            const currentColor = {
                r: Math.round(colors[colorIndex].r + (colors[nextColorIndex].r - colors[colorIndex].r) * colorTransition),
                g: Math.round(colors[colorIndex].g + (colors[nextColorIndex].g - colors[colorIndex].g) * colorTransition),
                b: Math.round(colors[colorIndex].b + (colors[nextColorIndex].b - colors[colorIndex].b) * colorTransition)
            };

            innerCtx.clearRect(0, 0, innerParticles.width, innerParticles.height);
            
            particles.forEach(particle => {
                particle.update();
                particle.draw(innerCtx, currentColor);
            });

            drawOuterRing(currentColor);
            requestAnimationFrame(animate);
        }

        // Initialize and start animation
        resizeCanvas();
        window.addEventListener('resize', () => {
            resizeCanvas();
            initParticles();
        });

        initParticles();
        requestAnimationFrame(animate);
    </script>
</body>
</html>