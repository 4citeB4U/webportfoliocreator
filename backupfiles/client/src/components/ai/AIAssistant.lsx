import { FC, useState, useCallback, useRef, useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Bot, Send, Loader2, Wand } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { processAICommand } from '@/lib/ai/aiService';
import type { DraggableItemProps } from "@/components/dnd/DraggableComponent";

interface Message {
  role: 'user' | 'assistant';
  content: string;
  components?: DraggableItemProps[];
}

interface AIAssistantProps {
  onGenerateVariants?: (variants: DraggableItemProps[]) => void;
  onUpdateComponent?: (id: string, modifications: any) => void;
}

export const AIAssistant: FC<AIAssistantProps> = ({ 
  onGenerateVariants, 
  onUpdateComponent 
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const timeoutRef = useRef<NodeJS.Timeout>();

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const handleSubmit = useCallback(async () => {
    if (!input.trim() || isProcessing) return;

    // Add user message
    setMessages(prev => [...prev, { role: 'user', content: input }]);
    setInput('');
    setIsProcessing(true);

    // Set a timeout to prevent infinite loading
    timeoutRef.current = setTimeout(() => {
      setIsProcessing(false);
      toast({
        title: "Request timeout",
        description: "The request took too long to process. Please try again.",
        variant: "destructive",
      });
    }, 30000);

    try {
      const aiResponse = await processAICommand(input);
      let responseMessage = '';

      if (aiResponse.action === 'create' && aiResponse.components) {
        responseMessage = `I've created ${aiResponse.components.length} new components based on your request.`;
        onGenerateVariants?.(aiResponse.components);
      } else if (aiResponse.action === 'modify' && aiResponse.modifications) {
        responseMessage = "I've applied the requested modifications to the component.";
        const targetId = (aiResponse.modifications as any).targetId;
        if (targetId) {
          onUpdateComponent?.(targetId, aiResponse.modifications);
        }
      } else if (aiResponse.action === 'update' && aiResponse.modifications?.content?.answer) {
        responseMessage = aiResponse.modifications.content.answer;
      }

      setMessages(prev => [...prev, { 
        role: 'assistant',
        content: responseMessage,
        components: aiResponse.components
      }]);
    } catch (error) {
      console.error('Error processing request:', error);
      toast({
        title: "Error",
        description: "Failed to process your request. Please try again.",
        variant: "destructive",
      });
    } finally {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      setIsProcessing(false);
    }
  }, [input, onGenerateVariants, onUpdateComponent, toast]);

  return (
    <Card className="w-full h-[400px] flex flex-col bg-background overflow-hidden">
      <CardHeader className="border-b py-3 flex-none">
        <CardTitle className="flex items-center gap-2 text-foreground text-base">
          <Bot className="w-5 h-5" />
          Web Buddy
        </CardTitle>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col p-4 min-h-0">
        <ScrollArea 
          ref={scrollAreaRef}
          className="flex-1 pr-4 overflow-y-auto"
          style={{ maxHeight: 'calc(400px - 8rem)' }}
        >
          <div className="space-y-4">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${
                  message.role === 'assistant' ? 'justify-start' : 'justify-end'
                }`}
              >
                <div
                  className={`max-w-[80%] rounded-lg px-4 py-2 ${
                    message.role === 'assistant'
                      ? 'bg-secondary text-secondary-foreground'
                      : 'bg-primary text-primary-foreground'
                  }`}
                >
                  <p className="text-sm break-words whitespace-pre-wrap">{message.content}</p>
                  {message.components && (
                    <div className="mt-2 space-y-1">
                      <p className="text-sm font-medium">Generated Components:</p>
                      {message.components.map((comp, i) => (
                        <div key={i} className="text-sm opacity-90">
                          {comp.name}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
            {isProcessing && (
              <div className="flex justify-start">
                <div className="bg-secondary text-secondary-foreground max-w-[80%] rounded-lg px-4 py-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        <div className="flex gap-2 mt-4 pt-2 border-t flex-none">
          <Input
            placeholder="Ask me anything about development..."
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyPress={e => e.key === 'Enter' && !isProcessing && handleSubmit()}
            className="flex-1 bg-background text-foreground border-input"
            disabled={isProcessing} // Added disabled state
          />
          <Button onClick={handleSubmit} disabled={isProcessing || !input.trim()}>
            <Send className="w-4 h-4" />
          </Button>
          <Button
            variant="outline"
            onClick={() => setMessages([])}
            disabled={isProcessing || messages.length === 0}
          >
            <Wand className="w-4 h-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};