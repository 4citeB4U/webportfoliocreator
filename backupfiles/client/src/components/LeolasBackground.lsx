import React, { useState, useEffect } from 'react';

interface Particle {
  id: number;
  x: number;
  y: number;
  speedX: number;
  speedY: number;
  rotation: number;
  rotationSpeed: number;
  type: string;
  size: number;
  opacity: number;
}

interface LeolasBackgroundProps {
  particleCount?: number;
}

export const LeolasBackground: React.FC<LeolasBackgroundProps> = ({ particleCount = 12 }) => { // Reduced from 25 to 12
  const [particles, setParticles] = useState<Particle[]>([]);

  useEffect(() => {
    // Create initial particles with larger size (3x the original)
    const initialParticles: Particle[] = Array.from({ length: particleCount }, (_, i) => ({
      id: i,
      x: Math.random() * window.innerWidth,
      y: Math.random() * window.innerHeight,
      speedX: (Math.random() - 0.5) * 2,
      speedY: (Math.random() - 0.5) * 2,
      rotation: Math.random() * 360,
      rotationSpeed: (Math.random() - 0.5) * 4,
      type: Math.random() > 0.5 ? 'ðŸª¡' : 'ðŸ§¶',
      size: 180 + Math.random() * 180, // Increased size (3x the original: 60 -> 180)
      opacity: 0.8 + Math.random() * 0.2
    }));

    setParticles(initialParticles);

    const animate = () => {
      setParticles(prev => prev.map(particle => {
        let newX = particle.x + particle.speedX;
        let newY = particle.y + particle.speedY;
        let newRotation = particle.rotation + particle.rotationSpeed;

        // Random speed variations
        const speedVariation = (Math.random() - 0.5) * 0.1;
        particle.speedX += speedVariation;
        particle.speedY += speedVariation;

        // Keep speeds within bounds
        particle.speedX = Math.max(-2, Math.min(2, particle.speedX));
        particle.speedY = Math.max(-2, Math.min(2, particle.speedY));

        // Bounce off edges with adjusted margins for larger particles
        if (newX < -180 || newX > window.innerWidth - 180) { // Adjusted margins for larger size
          particle.speedX *= -1;
          newX = particle.x;
        }
        if (newY < -180 || newY > window.innerHeight - 180) { // Adjusted margins for larger size
          particle.speedY *= -1;
          newY = particle.y;
        }

        // Randomize opacity for twinkling effect
        const newOpacity = particle.opacity + (Math.random() - 0.5) * 0.05;
        particle.opacity = Math.max(0.7, Math.min(1, newOpacity));

        return {
          ...particle,
          x: newX,
          y: newY,
          rotation: newRotation
        };
      }));
    };

    const intervalId = setInterval(animate, 50);
    return () => clearInterval(intervalId);
  }, [particleCount]);

  return (
    <div className="fixed inset-0 w-full h-full">
      {particles.map(particle => (
        <div
          key={particle.id}
          className="absolute select-none pointer-events-none"
          style={{
            left: particle.x,
            top: particle.y,
            transform: `rotate(${particle.rotation}deg)`,
            fontSize: `${particle.size}px`,
            opacity: particle.opacity,
            transition: 'transform 0.05s linear',
            zIndex: 1,
            filter: 'drop-shadow(0 0 8px rgba(255, 255, 255, 0.6))',
            textShadow: '0 0 12px rgba(255, 255, 255, 0.6)'
          }}
        >
          {particle.type}
        </div>
      ))}
    </div>
  );
};

export default LeolasBackground;